==================
Python Translation
==================

Quick Start Guide
=================
For the impatient, follow the bullets below and use examples to see what's
happening at each step. For the less impatient, this quick start is only to get
you going. Read the module docs for all the juicy details. Presented here is
a general list of steps with some notes on how different options may change the
the flow, and following that are some simple examples.

**Note: Expect these steps and notes to change as more of the fuctionality is
        filled out. This also means you should be careful to make sure your
        local copy of the repo is current.

1) Download the repo and put it somewhere the machine you intend to benchmark
   can access it.
2) Make a directory where you intend all benchmarking on this machine to take
   place.
3) Start a Python file which you will use primarily to keep track of the
   commands used in the current benchmarking.
4) Add these lines to the start of your file:
     import sys
     scriptDir = '/path/to/copy/of/this/repo/'
     sys.path.append(scriptDir)
     CASAglobals = globals()
5) Following those lines import either benchmark (single benchmark executions)
   or machine (single or multiple executions, recommended).
6m) (steps with "m" will be if import machine was used) Set some variables that,
    for example, determine which data sets you want to benchmark, how many times
    you want each data set executed and if the data should be downloaded from the
    science portal or retrieved from lustre etc.
      -names of data sets must match the dictionary variables in parameters.py
       so if you want to run Antennae Band 7 with CASA 4.2 the string you need
       to use will be 'AntennaeBand7_42'
      -see examples below for how to actually set these variables
7m) Instantiate a machine.machine object with the CASAglobals, scriptDir,
    dataSets, nIters, skipDownloads, steps, scriptsSources, (optionally) workDir
    and quiet parameters. This should be caught by a variable so you can run the
    other machine class methods.
8m) Run the runBenchmarks() method (optionally) setting the cleanUp parameter.
9m) Include code to run machine.makeReport on the .summary files from your
    benchmarks. See below for a simple example of this.
10) Start CASA
      -you can start CASA wherever you like
      -the automatically generated casapy log is not used so it does not need to
       be saved
11) Run execfile on your Python file at the CASA prompt.
6b) (steps with "b" will be if import benchmark was used) Set variables that,
    for example, specify where the calibration and imaging scripts are located
    (URL to CASA guide allowed), where the raw data can be retrieved (URL
    allowed) etc.
7b) Instantiate a benchmark.benchmark object with the scriptDir, (optionally)
    workdir, execStep, calSource, imSource, dataPath, skipDownload and quiet
    parameters. This should be caught by a variable so you can run the subsequent
    benchmark class methods.
      -values from parameters.py can be used here by adding the line
       "import parameters" and then using the different keys within the desired
       dictionary
      -if you plan on not downloading the data then be sure to set
       skipDownload=True here
8b) Run the (optionally) downloadData, extractData, doScriptExtraction,
    runGuideScripts, (optionally) emptyCurrRedDir and (optionally) removeTarDir
    methods.

Examples
========
###############################################################################
#script using machine module
import sys
CASAglobals = globals()
scriptDir = '/lustre/naasc/nbrunett/bench_code_devel/' + \
            'CASA-Guides-Script-Extractor'
sys.path.append(scriptDir)
import machine

#set benchmark options
dataSets = ['AntennaeBand7_43', 'x2012_1_00912_S_43', 'NGC3256Band3_43']
nIters = [2, 2, 2]
skipDownloads = [False, True, False]
steps = ['cal', 'both', 'im']
scriptsSources = ['web', 'disk', 'web']
quiet = False

#run benchmarking
#workDir defaults to current directory here
multivac = machine.machine(CASAglobals=CASAglobals,
                           scriptDir=scriptDir,
                           dataSets=dataSets,
                           nIters=nIters,
                           skipDownloads=skipDownloads,
			   steps=steps,
			   scriptsSources=scriptsSources,
			   quiet=quiet)
multivac.runBenchmarks(cleanUp=True)

#print results to terminal
print '\n\n\n'
print "here's my preliminary report, VERY rudimentary"
for i,dataSet in enumerate(dataSets):
    files = list()
    for i in range(nIters[i]):
        files.append(multivac.jobs[dataSet]['benchmarks'][i].calBenchSumm)
    report = machine.makeReport(files)
    print 'data set   host name   avg time   std time   run times'
    print '##Calibration:'
    print dataSet, multivac.hostName, report[0], report[1], report[2]

    files = list()
    for i in range(nIters[i]):
        files.append(multivac.jobs[dataSet]['benchmarks'][i].imageBenchSumm)
    report = machine.makeReport(files)
    print '##Imaging'
    print dataSet, multivac.hostName, report[0], report[1], report[2]
###############################################################################

###############################################################################
#script using benchmark module directly
import sys
CASAglobals = globals()
scriptDir = '/lustre/naasc/nbrunett/bench_code_devel/' + \
            'CASA-Guides-Script-Extractor'
sys.path.append(scriptDir)
import benchmark

#set benchmark variables
execStep = 'both'
calibrationURL = 'http://casaguides.nrao.edu/index.php?title=NGC3256_Band3_' + \
                 'Calibration_for_CASA_4.2'
imagingURL = 'http://casaguides.nrao.edu/index.php?title=NGC3256_Band3_' + \
             'Imaging_for_CASA_4.2'
uncalDataPath = 'https://almascience.nrao.edu/almadata/sciver/NGC3256/' + \
                'NGC3256_Band3_UnCalibratedMSandTablesForReduction.tgz'
quiet = False

#run benchmarking
#workDir defaults to current directory here
#skipDownload defaults to False here
x = benchmark.benchmark(scriptDir=scriptDir,
                        workDir=workDir,
                        execStep=execStep,
                        calSource=calibrationURL,
                        imSource=imagingURL,
                        dataPath=uncalDataPath,
                        quiet=quiet)
x.downloadData()
x.extractData()
x.doScriptExtraction()
x.runGuideScripts(CASAglobals=CASAglobals)
x.emptyCurrentRedDir()
x.removeTarDir()
###############################################################################


New CASA version release
========================
Here is a list of items that must be completed whenever a new version of CASA is
released.
  -data sets that are simply benchmarked by running their calibration
   and imaging reduction scripts must have those scripts tested carefully in the
   new version to make sure no tasks are missing in the newer version
  -updated scripts must be copied to elric for Mac benchmarking and to Anand's
   benchmarking directory on lustre
  -new entries must be made in parameters.py (see "Updating parameters.py" below)


Adding new data set
==================
Here is a list of items that must be completed whenever a new data set is added
to the benchmarking list.
  -if new data sets are stored on lustre they must also be placed on
   elric for Mac benchmarking
  -new entries must be made in parameters.py (see "Updating parameters.py" below)


Updating parameters.py
======================
There are two standard reasons parameters.py would need to be updated:

  1) a new version of CASA has been released so the URLs or paths to the scripts
     need to be added for the new version
  2) we want to benchmark a new data set that is not included yet

Both of these updates are pretty straightforward if you follow the stylistic
conventions from all the other data sets. You must make sure though that new
data set variable names do not start with a number and do not contain periods
e.g. benchmarking an SB from ALMA project 2012.1.00912.S should be named
x2012_1_00912_S_42 (for CASA 4.2).


Updating extractCASAscript.py
=============================
In the module documentation for extractCASAscript it says that the global
casa_tasks list must be updated when using new versions of CASA. This is not the
case when using this benchmarking package since extractCASAscript is imported
within CASA. It does not hurt anything to fill out the casa_tasks variable in
extractCASAscript.py but it will be ignored by this package since it builds the
list automatically on its own.


Additional Notes
================
-It is possible to run the benchmark and machine classes on just a calibration
 or imgaging CASA guide (or script). Just specify the execStep parameter in
 benchmark.benchmark or steps parameter in machine.machine.

Files unique to translated architecture:
  -benchmark.py
  -machine.py
  -parameters.py
  -top_level.py
  -remote_machine_worker.py
  
All files included in translated architecture:
  -benchmark.py
  -machine.py
  -parameters.py
  -top_level.py
  -remote_machine_worker.py
  -extractCASAscript.py
  -casa_call.py
  -readcol.py
