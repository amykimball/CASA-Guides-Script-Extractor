==================
Python Translation
==================


========
Includes
========
Getting Started
Examples Using Classes Directly
New CASA Version Release
Adding A New Data Set
Updating parameters.py
Updating extractCASAscript.py
Additional Notes
========


Getting Started
===============
This form of the benchmarking code is designed to not only take advantage of
some of the benefits afforded using Python, but also to simplify the process of
actually running the benchmarking. For someone trying this for the first time
on the NRAO internal network, there are at most only four steps to get
benchmarking going.

##Quick Steps##
1) Setup passwordless ssh on the NRAO internal network through ssh-agent
   forwarding (see below).
2) Clone a copy of the repository to your local machine.
3) Edit itinerary.py to specify what will be benchmarked.
4) Invoke Python with top_level.py as the only argument.

These steps will allow you to quickly begin benchmarking CASA on machines that
you have ssh access to over the internal NRAO network. It will also run
multiple machines simultaneously over the network, speeding up the overall
process.

##Detailed Steps##
1) To setup passwordless ssh through ssh-agent forwarding, please ask for
   instruction from one of the sys admins. Pat helped me (nbrunett) and I found
   it to be an easy process with his help. If this is not done properly (i.e.
   from following some random instructions found through a quick Google search)
   it is likely to present a security risk and you will receive a gentle
   reminder from IT to do things securely.
2) Cloning (or downloading) a complete copy of the repository is easy with git
   at the command line. Just run this command at a command prompt in the
   directory where you want the repository directory to be placed:
     $ git clone -b python_translate https://github.com/jaredcrossley/CASA-Guides-Script-Extractor.git
   In case we forget to change this README if/when the python_translate branch
   is merged into the master branch and you see this error when running that
   command:
     fatal: Remote branch python_translate not found in upstream origin
   then run this
     $ git clone https://github.com/jaredcrossley/CASA-Guides-Script-Extractor.git
3) Editing itinerary.py just requires a text editor and what needs to be
   changed is explained at the top of the file itself. This is the way that
   you tell the automated benchmarking code what you want done. This includes
   which machines you want to run on, which data sets to run on each, how many
   iterations of each data set, which step (calibration, imaging or both) of
   the benchmarking you want to run, if you would like to download the data
   from the ALMA archive or try retrieving it from the NAASC lustre, where the
   calibration/imaging scripts can be extracted from and what directory you
   actually want the benchmarking to be done in.
4) Launching Python to run the automated benchmarking is a simple one-liner at
   the command prompt. Just run this line, changing the path to top_level.py
   so that it points to the location of your copy:
     $ python /lustre/naasc/nbrunett/CASA-Guides-Script-Extractor/top_level.py
   This will run the actual benchmarking, giving some very limited diagnostic
   output, and will return your prompt when all benchmarking jobs have
   finished. Please note that top_level.py will modify your ~/.casa/prelude.py
   file on each machine running benchmarks to include these lines:
     import os
     import matplotlib
     if os.environ.has_key('DA_BENCH'):
         matplotlib.use('Agg')
   All other contents of that file will be unchanged.
   
Below are examples for using the benchmark and machine classes from this
repository directly. Also included are instructions to be followed when a new
version of CASA is released, what must be done to add a new data set to the
benchmarking code, how to update parameters.py and a note on no longer needing
to update extractCASAscript.py with new task lists.


Examples Using Classes Directly
===============================
To do this, you should create a Python file (script) and copy one of the
examples into that file. Then you can edit your script to run whatever
benchmarking you wish. To actually run the script you would launch CASA and
run execfile on your file.

###############################################################################
#script using machine class directly
import sys
CASAglobals = globals()
scriptDir = '/lustre/naasc/nbrunett/bench_code_devel/' + \
            'CASA-Guides-Script-Extractor'
sys.path.append(scriptDir)
import machine

#set benchmark options
dataSets = ['AntennaeBand7_43', 'x2012_1_00912_S_43', 'NGC3256Band3_43']
nIters = [2, 2, 2]
skipDownloads = [False, True, False]
steps = ['cal', 'both', 'im']
scriptsSources = ['web', 'disk', 'web']
quiet = False

#run benchmarking
#workDir defaults to current directory here
multivac = machine.machine(CASAglobals=CASAglobals, \
                           scriptDir=scriptDir, \
                           dataSets=dataSets, \
                           nIters=nIters, \
                           skipDownloads=skipDownloads, \
			               steps=steps, \
			               scriptsSources=scriptsSources, \
			               quiet=quiet)
multivac.runBenchmarks(cleanUp=True)

#print results to terminal
print '\n\n\n'
print "here's my preliminary report, VERY rudimentary"
for i,dataSet in enumerate(dataSets):
    files = list()
    for i in range(nIters[i]):
        files.append(multivac.jobs[dataSet]['benchmarks'][i].calBenchSumm)
    report = machine.makeReport(files)
    print 'data set   host name   avg time   std time   run times'
    print '##Calibration:'
    print dataSet, multivac.hostName, report[0], report[1], report[2]

    files = list()
    for i in range(nIters[i]):
        files.append(multivac.jobs[dataSet]['benchmarks'][i].imageBenchSumm)
    report = machine.makeReport(files)
    print '##Imaging'
    print dataSet, multivac.hostName, report[0], report[1], report[2]
###############################################################################

###############################################################################
#script using benchmark class directly
import sys
CASAglobals = globals()
scriptDir = '/lustre/naasc/nbrunett/bench_code_devel/' + \
            'CASA-Guides-Script-Extractor'
sys.path.append(scriptDir)
import benchmark

#set benchmark variables
execStep = 'both'
calibrationURL = 'http://casaguides.nrao.edu/index.php?title=NGC3256_Band3_' + \
                 'Calibration_for_CASA_4.2'
imagingURL = 'http://casaguides.nrao.edu/index.php?title=NGC3256_Band3_' + \
             'Imaging_for_CASA_4.2'
uncalDataPath = 'https://almascience.nrao.edu/almadata/sciver/NGC3256/' + \
                'NGC3256_Band3_UnCalibratedMSandTablesForReduction.tgz'
quiet = False

#run benchmarking
#workDir defaults to current directory here
#skipDownload defaults to False here
x = benchmark.benchmark(scriptDir=scriptDir, \
                        workDir=workDir, \
                        execStep=execStep, \
                        calSource=calibrationURL, \
                        imSource=imagingURL, \
                        dataPath=uncalDataPath, \
                        quiet=quiet)
x.downloadData()
x.extractData()
x.doScriptExtraction()
x.runGuideScripts(CASAglobals=CASAglobals)
x.emptyCurrentRedDir()
x.removeTarDir()
###############################################################################


New CASA Version Release
========================
Here is a list of items that must be completed whenever a new version of CASA is
released.
  -data sets that are simply benchmarked by running their calibration
   and imaging reduction scripts must have those scripts tested carefully in the
   new version to make sure no tasks are missing in the newer version
  -updated scripts must be copied to elric for Mac benchmarking and to
   jaredcrossley's benchmarking directory on lustre
  -new entries must be made in parameters.py (see "Updating parameters.py" below)


Adding A New Data Set
=====================
Here is a list of items that must be completed whenever a new data set is added
to the benchmarking list.
  -if new data sets are stored on lustre they must also be placed on
   elric for Mac benchmarking
  -new entries must be made in parameters.py (see "Updating parameters.py" below)


Updating parameters.py
======================
There are two standard reasons parameters.py would need to be updated:

  1) a new version of CASA has been released so the URLs or paths to the scripts
     need to be added for the new version
  2) we want to benchmark a new data set that is not included yet

Both of these updates are pretty straightforward if you follow the stylistic
conventions from all the other data sets. You must make sure though that new
data set variable names do not start with a number and do not contain periods
e.g. benchmarking an SB from ALMA project 2012.1.00912.S should be named
x2012_1_00912_S_42 (for CASA 4.2).


Updating extractCASAscript.py
=============================
In the module documentation for extractCASAscript it says that the global
casa_tasks list variable must be updated when using new versions of CASA. This
is not the case when using this benchmarking package since extractCASAscript is
imported within CASA. It does not hurt anything to fill out the casa_tasks
variable in extractCASAscript.py but it will be ignored by this package since
it builds the list automatically on its own.


Additional Notes
================
Files unique to translated architecture:
  -benchmark.py
  -machine.py
  -parameters.py
  -top_level.py
  -remote_machine_worker.py
  -itinerary.py
  
All files included in translated architecture:
  -benchmark.py
  -machine.py
  -parameters.py
  -top_level.py
  -remote_machine_worker.py
  -itinerary.py
  -extractCASAscript.py
  -casa_call.py
  -readcol.py
